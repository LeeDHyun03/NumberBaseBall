Read Me.txt

Level Blueprint 시작 시
1. Chat Widget 생성하여 Viewport에 추가
2. 실행시킨 클라이언트의 Authority에 따라서 User ID를 Host 또는 Guest로 설정

Game Mode 시작 시
1. 1 ~ 9까지의 겹치지 않는 랜덤한 숫자 3개를 Random Set에 저장
2. 클라이언트는 로딩되기까지 시간이 걸리기에 2초 딜레이 후 로직 진행
3. 모든 플레이어 컨트롤러를 가져와 그 중 첫번째 컨트롤러에게 Turn 부여
4. 모든 플레이어 컨트롤러의 사이즈만큼 Player Count 설정

Player Controller 시작 시
1. 로컬 컨트롤러일 경우에만 Chat Widget의 Commit Text 이벤트에 On Send Commit Text To Server  이벤트를 바인딩

Chat Widget 게임 실행 중
2. 유저가 Chat Widget에 내용 입력 후 Commit을 하면 Commit Text에 바인딩된 이벤트를 호출하고 내용을 초기화

Player Controller 게임 실행 중
On Send Commit Text To Server 이벤트가 호출되면 인풋으로 받은 Commit된 String을 아래 조건에 해당하는지 판별
1. My Turn이 True인가?
2. Commit된 String의 첫번째 문자가 /인가?
  - 맞다면 String을 배열로 변환하고 /를 지운 후 다음 조건문 실행
3. 배열 안에 숫자만 있는가?
4. Count가 3보다 작은가?
위 조건에 모두 부합한다면 Game Mode의 Got Index From Client를 호출
하나라도 부합하지 않는다면 Game Mode의 Got Text From Client를 호출
각 조건에 맞는 이벤트를 호출했다면 Is Num과 My Number를 초기화

Game Mode 내부의 각 이벤트 진행 순서
Got Index From Client가 호출됐다면
1. Player Input Index를 이벤트의 Output인 Index로 Set
2. Player Current Count를 이벤트의 Output인 Count로 Set
3. Input User Id를 이벤트의 Output인 User Id로 Set
4. Player Input Index로 For Each Loop 실행
 4 - 1. 게임 시작 시 세팅한 Random Set의 Element와 동일한가?
    True -> Strike++
    False -> Ball++
5. Strike가 3인가?
  True -> is Success를 True로 Set하고 Broadcast Result함수로 진입
  False -> Player Count가 3인가?
      True -> Is Out을 True로 Set, Is Players Failed에 True를 Add, Broadcast Result함수로 진입
      False -> Broadcast Result함수로 진입
6. Get All Actors Of Class로 모든 플레이어 컨트롤러를 담은 배열을 생성
7. 위 생성된 배열로 For Each Loop 실행
 7 - 1. Player Controller를 Array Element로 Set
 7 - 2. Is Success가 True일 경우
   7 - 2 - 1. Player Controller의 Got Broadcast Success를 호출 
   7 - 2 - 2. Is End를 True로 Set
   7 - 2 - 3. Player Controller의 Count를 0으로 Set
 7 - 3. Is Out이 True일 경우
   7 - 3 - 1. Player Controller의 Got Broadcast Failed를 호출
   7 - 3 - 2. Is Players Failed의 크기가 게임 시작 때 설정한 Player Count와 같을 경우 
     7 - 3 - 2 - 1. God Broadcast All Player Failed 호출
     7 - 3 - 2 - 2. Is End를 True로 Set
     7 - 3 - 2 - 3. Player Controller의 Count를 0으로 Set
 7 - 4. Is Success와 Is Out이 모두 False일 경우
   7 - 4 - 1. Player Controller의 Got Broadcast Number를 호출
   7 - 4 - 2. Player Controller의 My Turn을 반전
8. Ball과 Strike를 0으로 Set
9. Is End가 True일 경우 
  9 - 1. Random Set을 재설정
  9 - 2. 모든 플레이어 컨트롤러를 가져와 그 크기만큼 Player Count를 재설정
  9 - 3. Is Players Failed 배열을 Clear하고 Is End를 False로 Set
10. Is Out과 Is Success를 False로 Set

Got Text From Client가 호출됐다면
1. Get All Actors Of Class로 모든 Player Controller를 가진 배열을 생성
2. 생성된 배열로 For Each Loop 실행하여 모든 Player Controller의 Got Broadcast Text Event 호출

Player Controller 내부의 각 이벤트 진행 순서
모든 이벤트는 Has Authority가 True일 경우에만 실행한다.
- Got Broadcast Number
   1. For Each Loop로 배열인 Number를 String에 하나씩 전달
   2. Append로 Strike, Ball, Out를 조합하여 Print String으로 출력
- Got Broadcast Text
   1. 전달받은 Text를 Print String으로 출력
- On Login With ID
   1. 전달받은 User ID를 User ID로 Set하고 Print String으로 로그인 했음을 출력
- Got Broadcast Clear
   1. For Each Loop로 배열인 Number를 String에 하나씩 전달
   2. Append로 User ID와 정답 번호를 조합하여 Print String으로 출력
   3. Number를 공백으로 Set, Count를 0으로 Set
- Got Broadcast Failed
   1. Print String으로 어느 유저가 실패하였는지 출력
- Got Broadcast All Player Failed
   1. 모든 플레이어가 실패하여 재시작함을 출력
   2. Number를 공백으로 Set, Count를 0으로 Set



간단한 진행 순서 요약
1. Level Blueprint에서 User ID를 부여
2. Player Controller는 전달받은 User ID로 자신의 User ID를 세팅
3. Player Controller는 Widget의 Text가 Commit되었을 때 발생되는 이벤트에 자신의 이벤트를 바인딩
4. Game Mode는 랜덤 숫자값 3개를 뽑은 후 플레이어 수 만큼 Player Count 세팅
5. Player Controller가 /를 포함한 3자리 숫자를 입력하면 Game Mode에서 계산한 결과를
모든 플레이어에게 전달
6. Player Controller가 그 외의 문자를 입력하면 Game Mode에서 해당 내용을 모든 플레이어 에게 전달
7. 만일 Player Controller가 3번을 틀렸다면 숫자 입력을 못하도록 제한
8. 모든 Player Controller가 3번을 틀렸다면 게임을 초기화
9. Player Controller가 정답을 입력했다면 모든 플레이어에게 어떤 플레이어가 성공했는지 출력하고 게임을 초기화
